---
layout: post
title: threejs几何体及网格
date: 2018-10-09
tags: [threejs]
---

前面已经使用过两种几何体，包括sphere和cube.

    let sphereGeometry = new THREE.SphereGeometry(4, 20, 20) // 定义物体形状，
    let sphereMaterial = new THREE.MeshBasicMaterial({ // 定义外观和材质
        color: 0x7777ff
    })
    let sphere = new THREE.Mesh(sphereGeometry, sphereMaterial); // 添加到场景中的网格

### 几何体的属性和方法

在threejs中，不需要自己定义集合体的所有顶点和面。对于立方体来说，只需要定义长宽高即可。当然，我们也可以通过定义顶点和面来自定义创建集合体。

    let vertices = [
        new THREE.Vector(1,3,1),
        new THREE.Vector(1,3,-1),
        new THREE.Vector(1,-1,1),
        new THREE.Vector(1,-1,-1),
        new THREE.Vector(-1,3,-1),
        new THREE.Vector(-1,3,1),
        new THREE.Vector(-1,-1,-1),
        new THREE.Vector(-1,-1,1)
    ];

    let faces = [
        new THREE.Face3(0, 2, 1),
        new THREE.Face3(2, 3, 1),
        new THREE.Face3(4, 6, 5),
        new THREE.Face3(6, 7, 5),
        new THREE.Face3(4, 5, 1),
        new THREE.Face3(5, 0, 1),
        new THREE.Face3(7, 6, 2),
        new THREE.Face3(6, 3, 2),
        new THREE.Face3(5, 7, 0),
        new THREE.Face3(7, 2, 0),
        new THREE.Face3(1, 3, 4),
        new THREE.Face3(3, 6, 4),
    ]
    
这样可以创建一个简单的立方体：

<img src="http://ovk2ylefr.bkt.clouddn.com/three4.png">

vertices数组保存了构成几何体的定点，faces数组保存了有这些定点连接起来创建的三角形面。例如：new THREE.Face3(0,2,1),就是使用 vertices数组中的-，2，1和创建而成的三角形面。需要注意的是创建面的顶点时的创建顺序，因为顶点顺序决定了某个面试面向摄像机还是背向摄像机。面向摄像机，定点顺序是顺时针的，否则为逆时针。

之后我们就可以创建THREE.Geometry的实例对象geom，然后将vertices数组赋值给geom的vertices属性，将face数组赋值给geom的faces属性。

    let geom = new THREE.Geometry();
    geom.vertices = vertices;
    geomfaces = faces;
    geom.computeFaceNormals(); // 执行这个方法threejs会决定每个面的法向量，法向量用于决定不同光源下的颜色。

之后，我们可以基于几何体创建网格.

    let mesh = THREE.SceneUtils.createMultiMaterialObject( geom, materials );

关于geometry的函数还有一个就是clone().几何体可以定义物体的形状,添加相应的才之后就可以创建能够添加到场景中并由Threejs渲染的物体.通过clone方法,我们可以创建出几何体对象的拷贝.为这些拷贝对象添加不同的材质,就可以创建出不同的网格对象.

在三维空间中某一个点可以用一个坐标点来表示,一个坐标点,由x,y,z组成.Vector3.THREE.Geometry(),为几何体.包含点,颜色,面这三个数据结构.

    let geometry = new THREE.Geometry();
    geometry.vertices.push(
        new THREE.Vector3(-10, 10, 0),
        new THREE.Vector3(-10, -10, 0),
        new THREE.Vector3(10, -10, 0);
    )

材质概念:材质可以看成是材料和质感的结合.更多的是眼睛的感觉,这些可视属性指表面的色彩,纹理,光滑度,透明度,反射率折射率,发光度等.

THREE.LineBasicMaterial= function (parameters)

- color: 线条的颜色,16进制表示.
- Linewidth: 现款
- linecap: 线条两端的外观,默认圆角端点.

### 坐标系

使用的是右手坐标系.